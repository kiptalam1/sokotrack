generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())
  trader    Trader?
  applications Application[]
}

model Market {
  id        String   @id @default(uuid())
  name      String
  location  String?
  county    String
  createdAt DateTime @default(now())
  stalls    Stall[]

  @@unique([name, county])
}

model Stall {
  id                  String               @id @default(uuid())
  marketId            String
  stallNumber         String
  type                StallType
  status              StallStatus          @default(available)
  monthlyRent         Float
  bookings            Booking[]
  maintenanceRequests MaintenanceRequest[]
  market              Market               @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@unique([marketId, stallNumber])
}

model Trader {
  id           String   @id @default(uuid())
  userId       String   @unique
  nationalId   String   @unique
  phone        String?
  registeredAt DateTime @default(now())
  bookings     Booking[]

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Application {
  id         String            @id @default(uuid())
  userId     String
  nationalId String            @unique
  phone      String?
  status     ApplicationStatus @default(pending)
  createdAt  DateTime          @default(now())

  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id        String        @id @default(uuid())
  stallId   String
  traderId  String
  startDate DateTime
  endDate   DateTime?
  status    BookingStatus @default(active)
  createdAt DateTime      @default(now())
  stall     Stall         @relation(fields: [stallId], references: [id], onDelete: Cascade)
  trader    Trader        @relation(fields: [traderId], references: [id], onDelete: Cascade)
  payments  Payment[]

  @@unique([stallId, traderId, startDate])
}

model Payment {
  id        String        @id @default(uuid())
  bookingId String
  amount    Float
  method    PaymentMethod
  paidAt    DateTime      @default(now())
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model MaintenanceRequest {
  id          String            @id @default(uuid())
  stallId     String
  description String
  status      MaintenanceStatus @default(open)
  reportedAt  DateTime          @default(now())
  stall       Stall             @relation(fields: [stallId], references: [id], onDelete: Cascade)
}

/// Enums
enum Role {
  user
  admin
  officer
  trader
}

enum StallType {
  retail
  wholesale
  food
  other
}

enum StallStatus {
  available
  occupied
  reserved
  maintenance
}

enum ApplicationStatus {
  pending
  approved
  rejected
}

enum BookingStatus {
  active
  ended
}

enum PaymentMethod {
  mpesa
  cash
  bank
}

enum MaintenanceStatus {
  open
  in_progress
  closed
}
